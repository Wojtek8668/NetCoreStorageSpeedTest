
Publishing on mac

dotnet publish /Users/user/_Src/NetCoreStorageSpeedTest.git/CPDT_Console/CPDT_Console.csproj -c release -r linux-x64 -o /Users/_Src/NetCoreStorageSpeedTest.git/CPDT_Console/output-linux-x64 --self-contained true /p:PublishSingleFile=true



!OLD


Self-contained .NET Core publish (the output will contain all .NET Core files required by the app and won't need .NET Core installation as a system-wide dependency)

1. Add MyGet package repository in Visual Studio settings. Go to "Tools -> Options -> Package Manager -> Package Sources" and add new source at https://dotnet.myget.org/F/dotnet-core/api/v3/index.json

2.1. ILLink (tested on Windows and macOS)
The instructions assume you are using .NET Core 2.0 or .NET Core daily builds. You can validate your .NET Core SDK version by typing dotnet --version.
    1.  Select a project to test with. If you don't have one, you can do one of the following:
    ◦   Create one with dotnet new console -o testapp; cd testapp, or
    ◦   Clone / download the [.NET Core self-contained application Docker Production Sample -- using .NET IL Linker].
    2.  Add a NuGet.Config file in the root of your project, using the following:
    •   dotnet new nuget
    •   Add this line to nuget.config, under <clear />: <add key="dotnet-core" value="https://dotnet.myget.org/F/dotnet-core/api/v3/index.json" />
    •   The final file should look like nuget.config.
    1.  Add a reference to the latest version of the linker package in your .csproj, using the following:
    ◦   dotnet add package ILLink.Tasks -v 0.1.4-preview-906439
    2.  Publish the application, using the following:
    ◦   dotnet publish -c release -r <RID> -o out
    ◦   where <RID> is one of win-x64, win-x86, linux-x64, osx-x64 depending the OS that you want to publish for.
    ◦   Example: dotnet publish -c release -r win-x64 -o out
    3.  Run the application, with the following and depending the name of the application:
    ◦   Windows: out\testapp
    ◦   Linux/macOS: ./out/testapp
https://github.com/dotnet/core/blob/master/samples/linker-instructions.mddot

2.2. ILCompiler (tested on Windows, not working on macOS)
Reference Microsoft.DotNet.ILCompiler in WinMacDiskSpeedTest project


3. Run publish command to generate output:

dotnet publish C:\Dropbox\Projects\NetCoreStorageSpeedTest.git\CPDT_Console\CPDT_Console.csproj -c release -r win-x64 -o output-win-x64
dotnet publish /Users/user/Projects/NetCoreStorageSpeedTest.git/CPDT_Console/CPDT_Console.csproj -c release -r osx-x64 -o output-osx-x64 -f netcoreapp2.2
dotnet publish /Users/user/Projects/NetCoreStorageSpeedTest.git/CPDT_Console/CPDT_Console.csproj -c release -r linux-x64 -o output-linux-x64 -f --self-contained true netcoreapp3.0

- if dontnet publish shows an error, you might want to try to use VS publish dialog (Build -> Publish)